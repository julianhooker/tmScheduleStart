//created on: Jun 7, 2015
package com.schedule.test

import com.schedule.test.Member;
import com.schedule.test.Schedule;

//declare any global variables here

rule "Assign a Toastmaster"

    when
    	$member : Member (speechesCount > 1,
    		generalEvaluatorCount > 1,
    		recentlyServedInRole("Toastmaster") != true
    		)
		$schedule : Schedule (toastmaster == null,
			memberAlreadyAssigned($member) == false)
    then
    	modify ($schedule) { setToastmaster($member) };
    	modify ($member) { addPreviousRole("Toastmaster") };
end

rule "Assign a General Evaluator"
    when
        $member : Member(evaluatorCount > 3,
        	recentlyServedInRole("General Evaluator") != true)
        $schedule : Schedule (generalEvaluator == null,
			memberAlreadyAssigned($member) == false)
    then
        modify ($schedule) { setGeneralEvaluator($member) };
        modify ($member) { addPreviousRole("General Evaluator") };
end

rule "Assign a Topics Master"
	when
		$member : Member (recentlyServedInRole("TopicMaster") != true,
			getSpeechesCount() > 1)
		$schedule : Schedule (topicMaster == null,
			memberAlreadyAssigned($member) == false)
	then
		modify ($schedule) { setTopicMaster($member) };
		modify ($member) { addPreviousRole("TopicMaster") };
end

rule "Assign Speaker 1"
	when
		$member : Member (recentlyServedInRole("Speaker") != true)
		$schedule : Schedule (speakerOne == null,
			memberAlreadyAssigned($member) == false)
	then
		modify ($schedule) { setSpeakerOne($member) };
		modify ($member) { addPreviousRole("Speaker") };
end

rule "Assign Evaluator 1"
	when
		$member : Member(speechesCount > 3,
			recentlyServedInRole("Evaluator") != true)
		$schedule : Schedule (evaluatorOne == null,
			memberAlreadyAssigned($member) == false)
	then
		modify ($schedule) { setEvaluatorOne($member) };
		modify ($member) { addPreviousRole("Evaluator") };
end

rule "Assign Speaker 2"
	when
		$member : Member (recentlyServedInRole("Speaker") != true)
		$schedule : Schedule (speakerTwo == null,
			memberAlreadyAssigned($member) == false)
	then
		modify ($schedule) { setSpeakerTwo($member) };
		modify ($member) { addPreviousRole("Speaker") };
end

rule "Assign Evaluator 2"
	when
		$member : Member(speechesCount > 3,
			recentlyServedInRole("Evaluator") != true)
		$schedule : Schedule (evaluatorTwo == null,
			memberAlreadyAssigned($member) == false)
	then
		modify ($schedule) { setEvaluatorTwo($member) };
		modify ($member) { addPreviousRole("Evaluator") };
end

rule "Assign a Grammarian"
	when
		$member : Member (recentlyServedInRole("Grammarian") != true)
		$schedule : Schedule (grammarian == null,
			memberAlreadyAssigned($member) == false)
	then
		modify ($schedule) { setGrammarian($member) };
		modify ($member) { addPreviousRole("Grammarian") };
end

rule "Assign a Timer"
	when
		$member : Member (recentlyServedInRole("Timer") != true)
		$schedule : Schedule (timer == null,
			memberAlreadyAssigned($member) == false)
	then
		modify ($schedule) { setTimer($member) };
		modify ($member) { addPreviousRole("Timer") };
end

rule "Assign ahcounter"
	when
		$member : Member (recentlyServedInRole("Ah Counter") != true)
		$schedule : Schedule (ahCounter == null,
			memberAlreadyAssigned($member) == false)
	then
		modify ($schedule) { setAhCounter($member) };
		modify ($member) { addPreviousRole("Ah Counter") };
end